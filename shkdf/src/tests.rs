// MIT License

// Copyright (c) 2018 brycx

// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:

// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use derive_key;

#[test]
fn test_case_1() {
    let mut dk = [0u8; 32];
    let expected_dk = [
        55, 97, 163, 124, 38, 234, 248, 160, 70, 67, 84, 143, 126, 82, 249, 124, 154, 216, 219,
        179, 54, 16, 14, 68, 133, 122, 112, 240, 195, 190, 180, 10,
    ];
    let special_salt = [
        38, 213, 83, 59, 58, 240, 200, 189, 95, 163, 194, 26, 132, 78, 150, 95, 167, 200, 58, 126,
        107, 102, 209, 175, 253, 42, 50, 230, 240, 148, 160, 16, 249, 101, 205, 157, 15, 147, 222,
        141, 190, 58, 54, 105, 229, 144, 12, 29, 212, 149, 196, 119, 21, 65, 23, 43, 116, 89, 12,
        16, 209, 41, 225, 185, 105, 143, 228, 74, 149, 142, 112, 219, 225, 0, 87, 23, 216, 21, 248,
        251, 171, 5, 1, 22, 187, 221, 153, 31, 226, 190, 140, 172, 7, 7, 23, 204, 98, 223, 77, 162,
        55, 160, 49, 39, 9, 18, 131, 235, 214, 214, 35, 28, 125, 202, 236, 250, 186, 203, 78, 51,
        214, 123, 160, 167, 188, 72, 71, 76,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}

#[test]
fn test_case_2() {
    let mut dk = [0u8; 64];
    let expected_dk = [
        43, 239, 120, 23, 226, 125, 72, 207, 245, 246, 163, 243, 144, 84, 236, 8, 166, 178, 66, 13,
        130, 170, 254, 219, 72, 246, 138, 205, 53, 156, 24, 94, 109, 130, 150, 93, 126, 95, 21,
        199, 193, 21, 216, 41, 234, 135, 36, 63, 34, 0, 201, 152, 73, 167, 39, 199, 51, 26, 108,
        229, 184, 48, 149, 130,
    ];
    let special_salt = [
        122, 138, 64, 68, 146, 7, 177, 44, 160, 186, 78, 140, 225, 240, 212, 182, 249, 58, 161,
        146, 197, 117, 102, 21, 7, 202, 9, 166, 113, 204, 75, 218, 30, 77, 67, 0, 245, 134, 47,
        111, 173, 169, 185, 238, 37, 236, 229, 67, 240, 84, 163, 77, 29, 68, 168, 207, 59, 190,
        111, 3, 33, 98, 239, 255, 117, 227, 77, 89, 199, 137, 232, 54, 71, 73, 88, 126, 144, 75,
        96, 1, 240, 119, 156, 211, 71, 104, 154, 192, 125, 88, 236, 68, 136, 216, 83, 77, 21, 246,
        204, 77, 139, 100, 97, 193, 179, 131, 177, 14, 182, 248, 7, 164, 114, 195, 190, 87, 229,
        20, 64, 226, 194, 239, 89, 113, 16, 196, 104, 32,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}

#[test]
fn test_case_3() {
    let mut dk = [0u8; 128];
    let expected_dk = [
        98, 32, 92, 34, 29, 198, 25, 231, 174, 168, 169, 96, 236, 130, 200, 107, 135, 114, 240,
        239, 241, 147, 9, 188, 251, 5, 155, 82, 243, 50, 248, 95, 163, 215, 54, 5, 30, 102, 33, 27,
        221, 159, 206, 54, 61, 85, 178, 226, 107, 183, 141, 217, 65, 104, 178, 215, 35, 222, 12,
        92, 182, 5, 173, 194, 240, 73, 210, 139, 109, 73, 230, 93, 183, 65, 71, 64, 170, 0, 124,
        183, 157, 208, 150, 44, 223, 73, 178, 104, 145, 93, 168, 188, 149, 145, 165, 27, 68, 180,
        48, 227, 216, 67, 18, 84, 130, 237, 85, 140, 25, 49, 27, 241, 198, 137, 69, 81, 3, 130,
        207, 103, 78, 47, 41, 227, 210, 159, 65, 243,
    ];
    let special_salt = [
        207, 161, 149, 48, 175, 157, 168, 66, 181, 52, 128, 8, 37, 73, 216, 153, 218, 181, 251,
        187, 61, 98, 195, 230, 133, 189, 109, 61, 231, 147, 21, 158, 37, 173, 94, 174, 72, 199,
        183, 120, 63, 56, 111, 73, 75, 177, 71, 165, 246, 16, 108, 39, 196, 92, 197, 133, 26, 68,
        217, 187, 190, 136, 83, 149, 157, 21, 62, 235, 235, 96, 34, 112, 101, 162, 251, 3, 197,
        167, 111, 252, 126, 40, 245, 224, 215, 33, 21, 102, 70, 246, 69, 193, 17, 151, 38, 152,
        215, 26, 25, 172, 181, 204, 84, 162, 148, 72, 221, 61, 176, 220, 134, 82, 25, 16, 7, 98,
        153, 24, 62, 169, 237, 77, 29, 248, 10, 244, 86, 54, 224, 251, 37, 206, 244, 65, 239, 100,
        113, 214, 248, 190, 235, 81, 178, 96, 56, 225, 70, 217, 82, 201, 78, 209, 151, 170, 147,
        192, 166, 192, 106, 22, 24, 11, 86, 94, 152, 34, 140, 168, 142, 97, 36, 159, 213, 250, 108,
        66, 151, 142, 247, 86, 233, 21, 156, 161, 26, 229, 67, 173, 132, 26, 225, 196, 115, 46, 58,
        121, 193, 55, 214, 93, 153, 108, 3, 241, 127, 20, 108, 101, 237, 209, 245, 105, 159, 116,
        49, 223, 169, 245, 137, 237, 131, 177, 135, 42, 47, 109, 162, 136, 198, 174, 165, 145, 182,
        158, 28, 96, 25, 133, 0, 229, 205, 229, 222, 62, 194, 19, 251, 122, 171, 212, 60, 171, 25,
        30, 101, 126,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}

#[test]
fn test_case_4() {
    let mut dk = [0u8; 48];
    let expected_dk = [
        46, 57, 77, 223, 162, 0, 174, 165, 4, 199, 166, 57, 152, 132, 199, 56, 211, 176, 88, 197,
        120, 109, 0, 237, 14, 142, 10, 193, 151, 127, 203, 119, 195, 130, 143, 5, 60, 118, 71, 190,
        145, 63, 174, 243, 171, 176, 83, 213,
    ];
    let special_salt = [
        152, 78, 204, 198, 42, 224, 150, 36, 37, 226, 51, 186, 105, 100, 39, 186, 130, 15, 145, 47,
        111, 16, 16, 83, 202, 184, 141, 45, 165, 206, 19, 28, 197, 180, 55, 99, 66, 143, 250, 49,
        139, 115, 9, 38, 235, 80, 90, 109, 97, 124, 49, 217, 100, 11, 224, 187, 103, 112, 47, 245,
        54, 49, 61, 5, 160, 221, 165, 21, 239, 14, 90, 60, 195, 226, 75, 92, 133, 227, 250, 66,
        118, 229, 66, 88, 242, 70, 218, 160, 215, 180, 155, 192, 93, 166, 172, 74, 243, 41, 171,
        49, 154, 237, 14, 48, 10, 137, 204, 114, 18, 147, 225, 167, 167, 198, 245, 103, 57, 239,
        136, 132, 80, 205, 159, 209, 116, 124, 20, 38,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}

#[test]
fn test_case_5() {
    let mut dk = [0u8; 79];
    let expected_dk = [
        39, 108, 102, 131, 44, 162, 76, 141, 228, 96, 40, 156, 10, 37, 156, 136, 181, 15, 136, 31,
        115, 191, 190, 53, 209, 183, 13, 12, 119, 218, 52, 217, 218, 144, 154, 226, 88, 163, 86,
        133, 163, 146, 172, 43, 239, 105, 90, 240, 114, 111, 163, 37, 171, 56, 61, 96, 37, 112, 0,
        124, 215, 213, 13, 125, 175, 227, 237, 222, 74, 53, 101, 217, 25, 79, 202, 142, 58, 31, 63,
    ];
    let special_salt = [
        92, 133, 194, 222, 227, 213, 48, 43, 251, 251, 138, 187, 42, 200, 138, 214, 136, 180, 3,
        162, 9, 34, 146, 8, 61, 205, 158, 123, 113, 105, 112, 254, 199, 199, 13, 191, 37, 40, 150,
        69, 161, 207, 60, 121, 234, 9, 14, 248, 159, 252, 177, 212, 28, 227, 218, 172, 18, 5, 148,
        150, 253, 130, 62, 154, 20, 19, 21, 174, 7, 233, 22, 146, 60, 241, 143, 101, 188, 147, 187,
        38, 108, 27, 221, 13, 177, 251, 9, 123, 170, 1, 171, 123, 233, 213, 250, 80, 180, 14, 71,
        89, 251, 75, 214, 13, 231, 169, 15, 175, 31, 10, 1, 237, 193, 25, 255, 12, 63, 150, 157,
        84, 153, 163, 41, 236, 158, 29, 119, 60, 31, 49, 155, 29, 28, 100, 118, 72, 243, 119, 220,
        58, 84, 124, 106, 74, 195, 157, 137, 235, 189, 24, 120, 23, 97, 135, 5, 69, 183, 128, 9,
        165, 50, 119, 207, 59, 120, 16, 101, 196, 114, 74, 217, 211, 233, 77, 63, 152, 60, 22, 46,
        56, 183, 192, 174, 195, 85, 128, 71, 21, 184, 237, 81, 206, 254, 251, 131, 131, 22, 174,
        61, 25, 220, 187, 254, 15, 34, 81, 131, 234, 238, 70, 123, 147, 184, 100, 29, 54, 39, 14,
        15, 157, 173, 106, 152, 234, 37, 85, 193, 58, 86, 224, 177, 116, 112, 8, 134, 181, 86, 23,
        35, 252, 75, 161, 65, 228, 136, 54, 100, 22, 196, 12, 203, 59, 232, 255, 161, 127,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}

#[test]
fn test_case_6() {
    let mut dk = [0u8; 137];
    let expected_dk = [
        16, 187, 196, 60, 108, 127, 174, 22, 70, 193, 3, 27, 114, 96, 182, 238, 198, 175, 154, 195,
        140, 230, 84, 65, 73, 174, 69, 160, 143, 182, 51, 129, 131, 23, 46, 40, 146, 26, 86, 83,
        183, 235, 217, 41, 98, 1, 0, 131, 114, 25, 54, 185, 167, 233, 197, 133, 154, 205, 238, 246,
        77, 201, 245, 38, 205, 5, 39, 234, 3, 12, 80, 220, 107, 220, 175, 30, 87, 19, 170, 23, 13,
        165, 118, 28, 78, 101, 112, 112, 11, 7, 140, 65, 251, 11, 51, 90, 212, 147, 137, 174, 156,
        174, 170, 77, 239, 126, 22, 170, 21, 31, 34, 161, 143, 90, 75, 91, 225, 239, 86, 133, 144,
        33, 200, 213, 137, 25, 126, 181, 82, 35, 195, 88, 171, 167, 213, 81, 3,
    ];
    let special_salt = [
        156, 211, 15, 58, 116, 254, 159, 12, 94, 51, 142, 183, 127, 91, 1, 204, 216, 119, 22, 115,
        57, 164, 176, 88, 138, 107, 104, 16, 58, 115, 228, 123, 175, 246, 37, 246, 89, 47, 144,
        180, 62, 99, 181, 220, 250, 26, 198, 94, 171, 249, 203, 67, 156, 134, 85, 67, 55, 232, 190,
        59, 65, 50, 8, 246, 235, 164, 195, 26, 79, 148, 244, 240, 235, 68, 67, 123, 93, 215, 192,
        12, 166, 171, 240, 100, 187, 100, 83, 160, 123, 17, 69, 141, 82, 66, 145, 254, 61, 157,
        160, 146, 26, 122, 112, 168, 25, 189, 61, 83, 102, 243, 74, 137, 211, 81, 141, 112, 39, 86,
        178, 41, 76, 113, 182, 217, 199, 217, 90, 21, 31, 60, 92, 23, 255, 164, 152, 44, 12, 186,
        55, 222, 164, 230, 250, 91, 65, 31, 208, 238, 93, 101, 167, 100, 205, 119, 26, 76, 81, 191,
        209, 48, 64, 107, 75, 206, 41, 94, 56, 174, 195, 251, 150, 234, 252, 97, 106, 190, 11, 127,
        101, 26, 133, 231, 132, 34, 143, 64, 2, 250, 115, 240, 188, 152, 87, 197, 188, 53, 199,
        163, 9, 96, 109, 156, 236, 59, 116, 186, 155, 145, 16, 159, 65, 174, 57, 171, 242, 211, 29,
        213, 59, 148, 20, 31, 171, 40, 110, 126, 165, 161, 86, 13, 28, 193, 131, 36, 53, 230, 183,
        37, 56, 33, 83, 254, 209, 128, 117, 39, 243, 35, 9, 61, 6, 170, 79, 243, 82, 40, 139, 119,
        15, 235, 217, 115, 26, 179, 69, 46, 143, 55, 76, 101, 149, 43, 120, 229, 110, 151, 11, 4,
        104, 96, 0, 166, 167, 29, 64, 82, 131, 156, 1, 105, 174, 14, 167, 45, 210, 242, 60, 100,
        176, 183, 107, 111, 184, 160, 232, 68, 62, 10, 179, 215, 213, 49, 250, 205, 233, 183, 141,
        164, 158, 159, 134, 76, 109, 181, 98, 68, 220, 91, 249, 30, 143, 180, 127, 143, 2, 201, 24,
        158, 120, 68, 72, 29, 129, 109, 13, 34, 122, 153, 197, 233, 19, 119, 141, 236, 68, 168,
        157, 72, 117, 179, 184, 109, 110, 157, 231, 36, 0, 68, 206, 26, 168, 150, 98, 234, 161,
        196, 179, 63, 140, 36, 206, 26, 32, 246, 251, 219, 71, 246, 186, 177, 235, 163, 43, 145,
        251, 0, 83, 80, 209, 208, 51, 46, 52, 239, 125, 3, 150, 33, 6, 113, 138, 162, 105, 127, 71,
        117, 5, 152, 167, 114, 129, 224, 174, 17, 89, 172, 251, 84, 81, 181, 23, 100, 28, 209, 222,
        215, 34, 63, 251, 116, 204, 167, 196, 31, 105, 221, 30, 107, 248, 48, 47, 115, 22, 206,
        232, 245, 199, 114, 67, 236, 166, 153, 193, 28, 159, 8, 134, 246, 9, 32, 253, 114, 195,
        119, 108, 30, 68, 88, 126, 89, 50, 138, 248, 34, 124, 125, 105, 177, 119, 36, 251, 167, 56,
        166, 44, 171, 156, 31, 17, 186, 246, 1, 157, 80, 80, 248, 138, 70, 240, 238, 195, 42,
    ];

    let salt = special_salt;
    let info = "Key Exchange chain 2".as_bytes();
    let ikm = "Key to be stretched".as_bytes();

    derive_key(&salt, ikm, info, &mut dk, &special_salt);
    assert_eq!(dk.as_ref(), expected_dk.as_ref());
}
